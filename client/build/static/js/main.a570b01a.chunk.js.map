{"version":3,"sources":["hooks/http.hook.js","context/App.context.js","components/Loader.js","components/Tablelist.js","pages/Tablepage.js","pages/AuthPage.js","hooks/message.hook.js","components/NavBar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Loader","style","display","justifyContent","paddingTop","class","Tablelist","table","lenght","className","selectRowProp","mode","bgColor","clickToSelect","onSelect","row","isSelected","e","prop","console","log","onSelectAll","rows","deleteRow","selectRow","dataField","isKey","width","Tablepage","setTable","useContext","fetchtable","Authorization","fetched","useEffect","AuthPage","auth","text","window","M","toast","html","email","password","form","setForm","updateTextFields","changeHandler","event","target","name","value","registerHandler","loginHandler","placeholder","id","type","onChange","htmlFor","marginRight","onClick","disabled","Navbar","history","useHistory","padding","href","preventDefault","push","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","isAuthentificated","routes","path","exact","to","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a570b01a.chunk.js","sourcesContent":["import {useState,useCallback} from 'react' \r\n\r\nexport const useHttp= ()=> {\r\n    const [loading,setLoading]=useState(false)\r\n    const [error,setError]=useState(null)\r\n    const request = useCallback( async (url,method='GET',body=null,headers={}) => {\r\n        setLoading(true)\r\n        try {\r\n\r\n            if(body){\r\n                body = JSON.stringify(body)\r\n            }\r\n            headers['Content-Type'] = 'application/json'\r\n\r\n           const response = await fetch(url,{method,body,headers})\r\n            const data = await response.json()\r\n\r\n            if(!response.ok){\r\n                throw new Error(data.message ||'Что-то пошло не так')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n\r\n\r\n\r\n    },[])\r\n\r\n    const clearError = useCallback( ()=>setError(null),[])\r\n    return {loading,request,error,clearError}\r\n\r\n}","import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n  token: null,\r\n  userId: null,\r\n  login: noop,\r\n  logout: noop,\r\n  isAuthenticated: false\r\n})","import React from 'react'\r\n\r\nexport const Loader = () => (\r\n    <div style={{display:'flex',justifyContent:'center',paddingTop:'2rem'}}>\r\n        <div class=\"preloader-wrapper big active\">\r\n            <div class=\"spinner-layer spinner-blue-only\">\r\n                <div class=\"circle-clipper left\">\r\n                    <div class=\"circle\"></div>\r\n                </div><div class=\"gap-patch\">\r\n                    <div class=\"circle\"></div>\r\n                </div><div class=\"circle-clipper right\">\r\n                    <div class=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)","import React from 'react'\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table'\r\n\r\n\r\nexport const Tablelist = ({ table }) => {\r\n\r\n    \r\n    if (table.lenght) {\r\n\r\n        return <p className=\"center\">no</p>\r\n    }\r\n    function onRowSelect(row, isSelected, e) {\r\n        let rowStr = '';\r\n        for (const prop in row) {\r\n          rowStr += prop + ': \"' + row[prop] + '\"';\r\n        }\r\n        console.log(e);\r\n        //alert(`is selected: ${isSelected}, ${rowStr}`);\r\n      }\r\n      \r\n      function onSelectAll(isSelected, rows) {\r\n        /*alert(`is select all: ${isSelected}`);\r\n       if (isSelected) {\r\n          alert('Current display and selected data: ');\r\n        } else {\r\n          alert('unselect rows: ');\r\n        }\r\n        for (let i = 0; i < rows.length; i++) {\r\n          alert(rows[i].id);\r\n        }*/\r\n      }\r\n    \r\n    \r\n    const selectRowProp={\r\n        mode: \"checkbox\",\r\n        bgColor:\"red\",\r\n        clickToSelect: true,\r\n         onSelect: onRowSelect,\r\n         onSelectAll: onSelectAll\r\n\r\n    }\r\n\r\n    \r\n      \r\n      \r\n        \r\n          return (\r\n              \r\n\r\n              <div>\r\n            <BootstrapTable data={ table } deleteRow = {true} selectRow={ selectRowProp }>\r\n                <TableHeaderColumn dataField=\"_id\" isKey={true} width=\"25%\">ID</TableHeaderColumn>\r\n                <TableHeaderColumn dataField=\"login\" width=\"25%\">Login</TableHeaderColumn>\r\n                <TableHeaderColumn dataField=\"email\" width=\"25%\">Email</TableHeaderColumn>\r\n                <TableHeaderColumn dataField=\"dateOfRegistration\" width=\"25%\">dateOfRegistration</TableHeaderColumn>\r\n            </BootstrapTable>\r\n            </div>\r\n            \r\n          );\r\n        \r\n      \r\n\r\n\r\n    \r\n          \r\n        \r\n    \r\n}","import React, { useState, useCallback, useEffect, useContext } from 'react';\r\nimport { useHttp } from '../hooks/http.hook';\r\nimport { AuthContext } from '../context/App.context';\r\nimport { Loader } from '../components/Loader';\r\nimport { Tablelist } from '../components/Tablelist';\r\n\r\n\r\n\r\n\r\nexport const Tablepage = () => {\r\n\r\n  const [table,setTable] = useState([])\r\n  const {loading, request } = useHttp()\r\n  const {token} = useContext(AuthContext)\r\n\r\n  const fetchtable = useCallback( async()=>{\r\n    try {\r\n      const fetched = await request('/api/table','GET',null,{\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setTable(fetched)\r\n      \r\n    } catch (e) {\r\n      \r\n    }\r\n  },[token,request])\r\n\r\n  useEffect( ()=>{\r\n    fetchtable()\r\n  },[fetchtable])\r\n\r\n  if(loading){\r\n    return <Loader/>\r\n  }\r\n  \r\n\r\n  return (\r\n    \r\n    <>\r\n\r\n      {!loading && <Tablelist table = {table} />}\r\n\r\n    </>\r\n\r\n\r\n\r\n  )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\nimport { AuthContext } from '../context/App.context'\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    const message = useMessage()\r\n    const {loading,request,error,clearError} = useHttp()\r\nconst [form,setForm] = useState({\r\n    login:'',\r\n    email:'',\r\n    password:''\r\n})\r\n\r\nuseEffect( () =>{\r\n    message(error)\r\n    clearError()\r\n},[error,message,clearError])\r\n\r\nuseEffect(()=>{\r\n    window.M.updateTextFields()\r\n},[])\r\n\r\nconst changeHandler = event => {\r\n    setForm({...form,[event.target.name]: event.target.value})\r\n}\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register','POST',{...form})\r\n            message(data)\r\n            \r\n        } catch (e) {\r\n            \r\n        }\r\n    }\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login','POST',{...form})\r\n            auth.login(data.token,data.userId)\r\n            \r\n            \r\n        } catch (e) {\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s6 offset-s3\">\r\n                <h1>Authorization</h1>\r\n                <div class=\"card green darken-1\">\r\n                    <div class=\"card-content white-text\">\r\n                        \r\n\r\n                        <div>\r\n\r\n                            <div class=\"input-field \">\r\n                                <input\r\n                                    placeholder=\"Введите Логин\"\r\n                                    id=\"login\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    name = \"login\"\r\n                                    \r\n                                    onChange={changeHandler}\r\n                                    />\r\n                                    \r\n                                <label htmlFor=\"login\">login</label>\r\n                            </div>\r\n\r\n                            <div class=\"input-field\">\r\n                                <input\r\n                                    placeholder=\"Введите email\"\r\n                                    id=\"email\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    name = \"email\" \r\n                                    value={form.email}\r\n                                    onChange={changeHandler}\r\n                                    />\r\n                                <label htmlFor=\"email\">email</label>\r\n                            </div>\r\n\r\n                            <div class=\"input-field\">\r\n                                <input\r\n                                    placeholder=\"Введите пароль\"\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"validate\"\r\n                                    name = \"password\"\r\n                                    value={form.password}\r\n                                    \r\n                                    onChange={changeHandler} \r\n                                    />\r\n                                <label htmlFor=\"passworf\">password</label>\r\n                            </div>\r\n\r\n                            \r\n\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div class=\"card-action\">\r\n                        <button className=\"btn red \" \r\n                        style={{ marginRight: 10 }}\r\n                       \r\n\r\n                        onClick={loginHandler}\r\n                        disabled={loading}\r\n\r\n\r\n                        >\r\n                            Log in\r\n                            </button>\r\n\r\n\r\n\r\n                        <button className=\"btn red \" \r\n                        onClick={registerHandler}\r\n                        disabled={loading}\r\n                        >\r\n                            \r\n                            Registration\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () =>{\r\n    return useCallback(text=>{\r\n        if(window.M && text) {\r\n            window.M.toast({html:text})\r\n        }\r\n    },[])\r\n}","import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../context/App.context';\r\n\r\nexport const Navbar = () => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n\r\n    const logoutHandler = event => {\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper blue darken-1\" style={{ padding: '0 2rem' }}>\r\n                <span className=\"brand-logo\">Table</span>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><a href=\"/\" onClick={logoutHandler}>Log out</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport 'materialize-css'\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/App.context';\nimport { Navbar } from './components/NavBar';\nimport { Loader } from './components/Loader';\n\nfunction App() {\n  const { token, login, logout, userId,ready } = useAuth()\n  const isAuthentificated = !!token\n  const routes = useRoutes(isAuthentificated)\n  if(!ready){\n    return <Loader/>\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      token,login,logout,userId,isAuthentificated\n    }}>\n      <Router>\n        {isAuthentificated && <Navbar/>}\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  )\n\n\n}\n\nexport default App\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(null)\r\n  const [ready, setReady] = useState(false)\r\n  const [userId, setUserId] = useState(null)\r\n\r\n  const login = useCallback((jwtToken, id) => {\r\n    setToken(jwtToken)\r\n    setUserId(id)\r\n\r\n    localStorage.setItem(storageName, JSON.stringify({\r\n      userId: id, token: jwtToken\r\n    }))\r\n  }, [])\r\n\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null)\r\n    setUserId(null)\r\n    localStorage.removeItem(storageName)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n    if (data && data.token) {\r\n      login(data.token, data.userId)\r\n    }\r\n    setReady(true)\r\n  }, [login])\r\n\r\n\r\n  return { login, logout, token, userId, ready }\r\n}","import React from 'react'\r\nimport {Switch,Route,Redirect} from 'react-router-dom'\r\nimport { Tablepage } from './pages/Tablepage'\r\nimport { AuthPage } from './pages/AuthPage'\r\n\r\n\r\nexport const useRoutes = isAuthentificated =>{\r\n    if(isAuthentificated){\r\n        return (\r\n            <Switch>\r\n                <Route path = \"/table\" exact>\r\n                    <Tablepage />\r\n                </Route>\r\n                <Redirect to = \"/table\"/>\r\n            </Switch>\r\n            \r\n        )\r\n    }\r\n    return(\r\n        <Switch>\r\n            <Route path =\"/\" exact>\r\n                <AuthPage />\r\n            </Route>\r\n            <Redirect to = \"/\"/>\r\n        </Switch>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\n//import $ from 'jquery';\n//import Popper from 'popper.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}